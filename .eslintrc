{
  "extends": [
    "airbnb",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "globals": {
    "document": false,
    "fetch": false
  },
  "plugins": [
    "@typescript-eslint",
    "import",
    "jest",
    "react-hooks",
    "sort-destructure-keys"
  ],
  "env": {
    "jest/globals": true,
    "browser": true
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "./tsconfig.json"
      }
    }
  },
  "parser": "@typescript-eslint/parser",
  "rules": {
    "react/no-array-index-key": "off",
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["error"],
    "operator-linebreak": [2, "after"],
    "implicit-arrow-linebreak": "off",
    "react/react-in-jsx-scope": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "jsx-a11y/no-autofocus": "off",
    // Without this rule there is an error in eslint when using variables in template strings
    "template-curly-spacing" : "off",
    "class-methods-use-this": "warn",
    "react/jsx-props-no-spreading": "off",
    "import/no-extraneous-dependencies": [
      "warn", {"devDependencies": true}
    ],
    "import/no-unresolved": "error",
    "react/jsx-one-expression-per-line": "off",
    // Without ignoredNodes there is an error in eslint when using variables in template strings
    "indent": ["error", 2, {"SwitchCase": 1, "ignoredNodes": ["TemplateLiteral", "ignoreStrings", "code"]}],
    "max-len": ["error", 1200],
    "comma-dangle": ["error", {
      "arrays": "always-multiline",
      "objects": "always-multiline",
      "imports": "always-multiline",
      "exports": "always-multiline",
      "functions": "only-multiline"
    }],
    "curly": ["error", "all"],
    "arrow-parens": ["error", "as-needed"],
    "react/jsx-indent": ["error", 2],
    "react/jsx-indent-props": ["error", 2],
    "react/jsx-sort-props": ["error", {
      "ignoreCase": false,
      "reservedFirst": false,
      "callbacksLast": false,
      "shorthandFirst": false,
      "shorthandLast": false
    }],
    "react/prop-types": "off",
    "react/forbid-prop-types": "off",
    "react/no-did-update-set-state": "off",
    "import/no-dynamic-require": "off",
    "react/require-default-props": "off",
    "react/destructuring-assignment": ["error", "always", { "ignoreClassFields": true }],
    "import/prefer-default-export": "off",
    "object-curly-newline": ["error", { "multiline": true, "consistent": true }],
    "react/jsx-filename-extension": "off",
    "react/jsx-curly-newline": ["error", {
      "singleline": "consistent",
      "multiline": "forbid"
    }],
    "jest/no-disabled-tests": "warn",
    "jest/no-focused-tests": "error",
    "jest/no-identical-title": "error",
    "jest/valid-expect": "error",
    "no-use-before-define": ["error", {"functions": false}],
    "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }],
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "sort-destructure-keys/sort-destructure-keys": ["error", { "caseSensitive": true }],
    "sort-keys": ["error", "asc", { "caseSensitive": true, "natural": true, "minKeys": 2 }],
    "quotes": ["error", "single", { "allowTemplateLiterals": true }],
    "padding-line-between-statements": [
      "error",
      { "blankLine": "always", "prev": ["const", "let", "var"], "next": "*"},
      { "blankLine": "always", "prev": "*", "next": ["const", "let", "var"]},
      { "blankLine": "any", "prev": ["const", "let", "var"], "next": ["const", "let", "var"]},
      { "blankLine": "always", "prev": "*", "next": "return" },
      { "blankLine": "always", "prev": "*", "next": "block-like" },
      { "blankLine": "always", "prev": "*", "next": "cjs-export" },
      { "blankLine": "always", "prev": "*", "next": "class" },
      { "blankLine": "always", "prev": "class", "next": "*" },
      { "blankLine": "always", "prev": "directive", "next": "*" },
      { "blankLine": "any", "prev": "directive", "next": "directive" },
      { "blankLine": "always", "prev": "*", "next": "export" },
      { "blankLine": "always", "prev": "export", "next": "*" },
      { "blankLine": "never", "prev": "*", "next": "case" },
      { "blankLine": "never", "prev": "case", "next": "default" }
    ]
  }
}
